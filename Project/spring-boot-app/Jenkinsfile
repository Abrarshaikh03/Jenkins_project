pipeline {
    agent {
        docker { 
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                sh 'rm -rf Project/spring-boot-app/target' // Optional, clears specific directories
                checkout scm
                sh 'echo passed' // It will pass the checkout stage from Git Repo
            }
        }

        stage('Build and Test') {
            steps {
                sh 'ls -ltr' // List all the files in current directory
                sh 'cd Project/spring-boot-app && mvn clean package' // Build the project using Maven
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://13.232.35.149:9000" // Correctly assign SonarQube server's URL
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd Project/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}' // Corrected SonarQube command
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "abrarshk03/project-cicd:${BUILD_NUMBER}" // Use Docker Image and BUILD_NUMBER is automatically generated by Jenkins for each build
            }
            steps {
                script {
                    sh 'cd Project/spring-boot-app && docker build -t ${DOCKER_IMAGE} .' // Build the Docker Image using Dockerfile in this directory
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") { // Use Docker credentials for pushing the image
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins_project" // The name of your GitHub repository
                GIT_USER_NAME = "Abrarshaikh03" // Your GitHub username
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                    git config user.email "abrarshk333@gmail.com"
                    git config user.name "Abrar Shaikh"
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" Project/spring-boot-app-manifests/deployment.yml
                    git add Project/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
